{"version":3,"sources":["app_components/weather.comoponents.jsx","app_components/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","placeholder","type","name","autoComplete","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_weather_icon","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangID","this","weathericon","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.37faeaf1.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./..\"\r\n\r\nconst Weather =(props)=> {\r\n    return (\r\n            <div className=\"container\">\r\n                <div className=\"cards pt-4\">\r\n                \r\n                    <h1>\r\n                        {/* JAIPUR */}\r\n                        {props.city}\r\n                    </h1>\r\n                    <h5 className=\"py-4 \">\r\n                        <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n                    </h5>\r\n\r\n                        { props.temp_celsius ? (<h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>): null}\r\n                    \r\n                   {minmaxTemp(props.temp_min,props.temp_max)}\r\n                   <h4 className=\"py-3\">{props.description}</h4>\r\n                </div>\r\n                \r\n            </div>\r\n    )\r\n}\r\n\r\nfunction minmaxTemp(min,max){\r\n    if(min && max){\r\n        return(\r\n            <h3>\r\n                <span className=\"px-4\">{min}&deg;</span>\r\n                <span className=\"px-4\">{max}&deg;</span>\r\n            </h3>\r\n        )\r\n    }\r\n    \r\n}\r\nexport default Weather;\r\n","import React from 'react'\r\nimport \"../app_components/form.style.css\"\r\nconst Form= props => {\r\n    return (\r\n      \r\n            <div className=\"container text-light\">\r\n                <div>{props.error ? error() :null }</div>\r\n               <form onSubmit={props.loadweather}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-3 offset-md-2\">\r\n                            <input placeholder=\"City\" type=\"text\" className=\"form-control\" name=\"city\" autoComplete=\"off\"/>\r\n                        </div>  \r\n                    <div className=\"col-md-3\">\r\n                            <input placeholder=\"Country\" type=\"text\" className=\"form-control\" name=\"country\" autoComplete=\"off\"/> \r\n                        </div>  \r\n                    <div className=\"col-md-3 mt-md-0 text-md-left\">\r\n                            <button className=\"btn btn-warning\">Get Weather</button>\r\n                        </div>  \r\n                    </div>\r\n               </form>\r\n            </div>\r\n      \r\n    )\r\n}\r\n\r\nfunction error(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please Enter City and Country\r\n        </div>\r\n    )\r\n}\r\nexport default Form","import React from 'react';\nimport './App.css';\n\nimport \"weather-icons/css/weather-icons.css\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\n\nimport Weather from './app_components/weather.comoponents'\nimport Form from \"./app_components/form.component\"\n\nconst API_key = \"d9508de96c8a2b29f542d90b8017d3c5\"\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      city : undefined,\n      country : undefined,\n      icon :undefined,\n      main : undefined,\n      celsius :undefined,\n      temp_max :undefined,\n      temp_min:undefined,\n      description :\"\",\n      error :false \n    }\n    this.weatherIcon ={\n      Thunderstorm : \"wi-thunderstorm\",\n      Drizzle :\"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atmosphere:\"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\"\n    }\n  }\n  calCelsius(temp)\n  {\n    let cell = Math.floor(temp-273.15)\n    return cell;\n  }\n  get_weather_icon(icons,rangID){\n    switch(true){\n      case rangID>=200 && rangID<=232:\n        this.setState({icon:this.weathericon.Thunderstorm})\n         break;\n        case rangID>=300 && rangID<=321:\n          this.setState({icon:this.weathericon.Drizzle})\n          break;\n          case rangID>=500 && rangID<=531:\n          this.setState({icon:this.weathericon.Rain})\n          break;\n        case rangID>=600 && rangID<=622:\n         this.setState({icon:this.weathericon.Snow})\n         break;\n        case rangID>=701 && rangID<=781:\n          this.setState({icon:this.weathericon.Atmosphere})\n          break;\n        case rangID === 800:\n            this.setState({icon:this.weatherIcon.Clear})\n        break;\n        case rangID>=801 && rangID<=804:\n         this.setState({icon:this.weathericon.Clouds})\n         break;\n         default:\n           this.setState({icon:this.weatherIcon.Clouds})\n    }\n  }\n  getWeather = async(e)=>{\n    e.preventDefault()\n    const city = e.target.elements.city.value\n    const country = e.target.elements.country.value\n    \n    if(city && country)\n    {\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`)\n      const response = await api_call.json()\n      console.log(response)\n      this.setState({\n        city :`${response.name},${response.sys.country}`,\n        celsius:this.calCelsius(response.main.temp),\n        temp_max : this.calCelsius(response.main.temp_max),\n        temp_min :this.calCelsius(response.main.temp_min),\n        description : response.weather[0].description,\n        \n      })\n  this.get_weather_icon(this.weatherIcon,response.weather[0])\n    }\n    else{\n      this.setState({error:true})\n    }\n   \n  }\n  render()\n  {\n    return(\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error = {this.state.error}/>\n        <Weather \n        city={this.state.city} \n        country={this.state.country} \n        temp_celsius={this.state.celsius}\n        temp_max ={this.state.temp_max}\n        temp_min = {this.state.temp_min}\n        description={this.state.description}\n        weatherIcon={this.state.icon}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}